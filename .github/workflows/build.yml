name: Build

# Add a button to trigger the workflow
on: 
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'README.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        full_target:
          # - allwinner_generic
          # - amlogic_meson8b
          # - amlogic_mesongx
          # - apm821xx_nand
          # - apm821xx_sata
          # - arc770_generic
          # - archs38_generic
          # - armsr_armv7
          # - armsr_armv8
          # - at91_sam9x
          # - at91_sama5
          # - ath25_generic
          # - ath79_generic
          # - ath79_mikrotik
          # - ath79_nand
          # - ath79_tiny
          # - bcm27xx_bcm2708
          # - bcm27xx_bcm2709
          # - bcm27xx_bcm2710
          # - bcm27xx_bcm2711
          # - bcm27xx_bcm2712
          # - bcm47xx_generic
          # - bcm47xx_legacy
          # - bcm47xx_mips74k
          # - bcm4908_generic
          # - bcm53xx_generic
          # - bcm63xx_generic
          # - bcm63xx_smp
          # - gemini_generic
          # - imx_cortexa7
          # - imx_cortexa9
          # - ipq40xx_generic
          # - ipq40xx_mikrotik
          # - ipq806x_generic
          # - kirkwood_generic
          # - lantiq_ase
          # - lantiq_xrx200
          # - lantiq_xway
          # - lantiq_xway_legacy
          # - layerscape_armv7
          # - layerscape_armv8_64b
          # - loongarch64_generic
          # - malta_be
          # - mediatek_filogic
          # - mediatek_mt7622
          # - mediatek_mt7623
          # - mediatek_mt7629
          # - mpc85xx_p1010
          # - mpc85xx_p1020
          # - mpc85xx_p2020
          # - mvebu_cortexa53
          # - mvebu_cortexa72
          # - mvebu_cortexa9
          # - mxs_generic
          # - octeon_generic
          # - octeontx_generic
          # - omap_generic
          # - oxnas_ox820
          # - phytium_armv8
          # - phytium_e2000
          # - phytium_phytiumpi
          # - pistachio_generic
          # - qualcommax_ipq50xx
          # - qualcommax_ipq60xx
          # - qualcommax_ipq807x
          # - ramips_mt7620
          # - ramips_mt7621
          # - ramips_mt76x8
          # - ramips_rt288x
          # - ramips_rt305x
          # - ramips_rt3883
          # - realtek_rtl838x
          # - realtek_rtl839x
          # - realtek_rtl930x
          # - realtek_rtl931x
          # - rockchip_armv8
          # - sifiveu_generic
          # - silicon_armv8
          # - starfive_generic
          # - stm32_stm32mp1
          # - sunxi_cortexa53
          # - sunxi_cortexa7
          # - sunxi_cortexa8
          # - tegra_generic
          - x86_64
          # - x86_generic
          # - x86_geode
          # - x86_legacy
          # - zynq_generic

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /usr/local/lib/android \
          /opt/ghc \
          /etc/mysql \
          /etc/php \
          /etc/php \
          /usr/local/.ghcup \
          /opt/hostedtoolcache/CodeQL \
          /usr/local/share/boost

        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get update
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swag texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev qemu-img
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

        echo "${{ matrix.full_target }}" | cut -d'_' -f1 | xargs -I {} echo "TARGET={}" >> $GITHUB_ENV
        echo "${{ matrix.full_target }}" | cut -d'_' -f2 | xargs -I {} echo "SUBTARGET={}" >> $GITHUB_ENV

    - name: Clone
      run: |
        git clone --depth 1 https://github.com/coolsnowwolf/lede -b master openwrt
        
    - name: Update & Install
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configuration
      run: |
        cd openwrt
        
        # 设置 target 和 subtarget（非交互式）
        echo "CONFIG_TARGET_${TARGET}=y" > .config
        echo "CONFIG_TARGET_${TARGET}_${SUBTARGET}=y" >> .config
        echo "CONFIG_IB=y" >> .config
        echo "CONFIG_SDK=y" >> .config
        echo "CONFIG_TARGET_MULTI_PROFILE=y" >> .config
        echo "CONFIG_TARGET_ALL_PROFILES=y" >> .config
        
        # 生成完整的默认配置
        make defconfig

        cat .config

    - name: Download
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        # 使用 -k 参数让 make 在遇到错误时继续构建其他目标
        # 使用 -i 参数忽略错误继续构建
        make -j$(nproc) -k -i V=s || true

    - name: Upload to SourceForge
      uses: Pendect/action-rsyncer@8e05ffa5c93e5d9c9b167796b26044d2c616b2b9
      with:
        flags: '-ahvHP'
        src: 'openwrt/bin/'
        dest: '${{ secrets.SF_USER }}@frs.sourceforge.net:/home/frs/project/lean-build/snapshot/'
      env:
        DEPLOY_KEY: ${{ secrets.SF_KEY }}
