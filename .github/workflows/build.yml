name: Build


on: 
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'README.md'
# Add a button to trigger the workflow
  workflow_dispatch:
    inputs:
      version:
        description: "The version you want to build"
        required: false
        default: "SNAPSHOT"

jobs:
  build:
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    # timeout-minutes: 1000
    strategy:
      fail-fast: false
      matrix:
        config:
          - fork-name: Lean
            branch: master
            target: x86
            subtarget: "64"
            repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: rockchip
          #   subtarget: armv8
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: ramips
          #   subtarget: mt7621
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: mediatek
          #   subtarget: filogic
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: amlogic
          #   subtarget: meson8b
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: armsr
          #   subtarget: armv8
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: ath79
          #   subtarget: nand
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: bcm27xx
          #   subtarget: bcm2708
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: bcm27xx
          #   subtarget: bcm2709
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: bcm27xx
          #   subtarget: bcm2710
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: bcm27xx
          #   subtarget: bcm2711
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: bcm27xx
          #   subtarget: bcm2712
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: bcm53xx
          #   subtarget: generic
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: ipq40xx
          #   subtarget: generic
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: ipq806x
          #   subtarget: generic
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: mediatek
          #   subtarget: mt7622
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: mvebu
          #   subtarget: cortexa9
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: qualcommax
          #   subtarget: ipq50xx
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: qualcommax
          #   subtarget: ipq60xx
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: qualcommax
          #   subtarget: ipq807x
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: ramips
          #   subtarget: mt7620
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: ramips
          #   subtarget: mt76x8
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: sunxi
          #   subtarget: cortexa53
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: sunxi
          #   subtarget: cortexa7
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: Lean
          #   branch: master
          #   target: x86
          #   subtarget: generic
          #   repo: https://github.com/coolsnowwolf/lede
          # - fork-name: hanwckf
          #   branch: openwrt-21.02
          #   target: mediatek
          #   subtarget: mt7981
          #   repo: https://github.com/hanwckf/immortalwrt-mt798x
          # - fork-name: hanwckf
          #   branch: openwrt-21.02
          #   target: mediatek
          #   subtarget: mt7986
          #   repo: https://github.com/hanwckf/immortalwrt-mt798x
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: x86
          #   subtarget: "64"
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: rockchip
          #   subtarget: armv8
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: ramips
          #   subtarget: mt7621
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: mediatek
          #   subtarget: filogic
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: amlogic
          #   subtarget: meson8b
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: armsr
          #   subtarget: armv8
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: ath79
          #   subtarget: nand
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: bcm27xx
          #   subtarget: bcm2708
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: bcm27xx
          #   subtarget: bcm2709
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: bcm27xx
          #   subtarget: bcm2710
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: bcm27xx
          #   subtarget: bcm2711
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: bcm27xx
          #   subtarget: bcm2712
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: bcm53xx
          #   subtarget: generic
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: ipq40xx
          #   subtarget: generic
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: ipq806x
          #   subtarget: generic
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: mediatek
          #   subtarget: mt7622
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: mvebu
          #   subtarget: cortexa9
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: qualcommax
          #   subtarget: ipq50xx
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: qualcommax
          #   subtarget: ipq60xx
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: qualcommax
          #   subtarget: ipq807x
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: ramips
          #   subtarget: mt7620
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: ramips
          #   subtarget: mt76x8
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: sunxi
          #   subtarget: cortexa53
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: sunxi
          #   subtarget: cortexa7
          #   repo: https://github.com/Lienol/openwrt
          # - fork-name: Lienol
          #   branch: "24.10"
          #   target: x86
          #   subtarget: generic
          #   repo: https://github.com/Lienol/openwrt
          
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /usr/local/lib/android \
          /opt/ghc \
          /etc/mysql \
          /etc/php \
          /etc/php \
          /usr/local/.ghcup \
          /opt/hostedtoolcache/CodeQL \
          /usr/local/share/boost

        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get update
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

        echo "which python3"
        which python3
        echo "test pyelftools"
        python3 -c "import pyelftools; print('pyelftools imported successfully')"

        # Configure CCACHE
        echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV

        if [ -z "${{ inputs.version }}" ]; then
          echo "VERSION=SNAPSHOT" >> $GITHUB_ENV
          echo "FEED_PATH=snapshots" >> $GITHUB_ENV
        else
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "FEED_PATH=releases/${{ inputs.version }}" >> $GITHUB_ENV
        fi

    - name: Free disk space
      uses: coder-xiaomo/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Clone
      run: |
        git clone --depth 1 ${{ matrix.config.repo }} -b ${{ matrix.config.branch }} openwrt
        cd openwrt
        latest_commit=$(git rev-parse HEAD)
        echo "LATEST_COMMIT=${latest_commit}" >> $GITHUB_ENV

    - name: Update & Install
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configuration
      run: |
        cd openwrt

        target=${{ matrix.config.target }}
        subtarget=${{ matrix.config.subtarget }}
        fork_name=${{ matrix.config.fork-name }}
        
        # 设置 target 和 subtarget（非交互式）
        echo "CONFIG_TARGET_${target}=y" > .config
        echo "CONFIG_TARGET_${target}_${subtarget}=y" >> .config
        echo "CONFIG_IB=y" >> .config
        echo "CONFIG_SDK=y" >> .config
        echo "CONFIG_TARGET_MULTI_PROFILE=y" >> .config
        echo "CONFIG_TARGET_ALL_PROFILES=y" >> .config
        echo "CONFIG_TARGET_PER_DEVICE_ROOTFS=y" >> .config
        
        # 启用 CCACHE
        echo "CONFIG_CCACHE=y" >> .config
        echo "CONFIG_CCACHE_DIR=.ccache" >> .config
        echo "CONFIG_DEVEL=y" >> .config

        # 启用软件源配置
        echo "CONFIG_IMAGEOPT=y" >> .config
        echo "CONFIG_VERSIONOPT=y" >> .config
        echo "CONFIG_VERSION_REPO=https://downloads.sourceforge.net/project/openwrt-forks-build/${fork_name}/${{ env.FEED_PATH }}" >> .config
        echo "CONFIG_VERSION_NUMBER=${{ env.VERSION }}" >> .config

        # kmods
        echo "CONFIG_ALL_KMODS=y" >> .config
        echo "CONFIG_ALL_NONSHARED=y" >> .config

        echo "CONFIG_BUILDBOT=y" >> .config
        echo "CONFIG_IB_STANDALONE=" >> .config
        
        # 生成完整的默认配置
        make defconfig

        # BPF
        echo "CONFIG_BPF=y" >> .config
        echo "CONFIG_BPF_SYSCALL=y" >> .config
        echo "CONFIG_BPF_JIT=y" >> .config
        echo "CONFIG_CGROUPS=y" >> .config
        echo "CONFIG_KPROBES=y" >> .config
        echo "CONFIG_NET_INGRESS=y" >> .config
        echo "CONFIG_NET_EGRESS=y" >> .config
        echo "CONFIG_NET_SCH_INGRESS=m" >> .config
        echo "CONFIG_NET_CLS_BPF=m" >> .config
        echo "CONFIG_NET_CLS_ACT=y" >> .config
        echo "CONFIG_BPF_STREAM_PARSER=y" >> .config
        echo "CONFIG_DEBUG_INFO=y" >> .config
        # 删除包含 CONFIG_DEBUG_INFO_REDUCED 的行
        sed -i '/CONFIG_DEBUG_INFO_REDUCED/d' .config
        echo "# CONFIG_DEBUG_INFO_REDUCED is not set" >> .config
        echo "CONFIG_KERNEL_DEBUG_INFO_BTF=y" >> .config
        echo "CONFIG_KERNEL_KPROBE_EVENTS=y" >> .config
        echo "CONFIG_KERNEL_BPF_EVENTS=y" >> .config

        cat .config

    - name: Download
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name:  Setup Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        toolchain: 'false'
        mixkey: '${{ matrix.config.fork-name }}-${{ matrix.config.target }}-${{ matrix.config.subtarget }}'
        prefix: 'openwrt'

    - name: Build
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."

        echo "${{ secrets.KEY_BUILD }}" > key-build
        cp ../key-build.pub ./key-build.pub

        # APK_SEC_KEY
        echo "${{ secrets.APK_SEC_KEY }}" > private-key.pem
        cp ../public-key.pem ./public-key.pem

        # 使用 -k 参数让 make 在遇到错误时继续构建其他目标
        # 使用 -i 参数忽略错误继续构建
        make -j$(nproc) -k -i || true


        # 打印所有 Packages.manifest 和 sha256sums
        echo "Packages.manifest:"
        find bin/ -name "Packages.manifest" -exec cat {} \;
        echo "sha256sums:"
        find bin/ -name "sha256sums" -exec cat {} \;

        if [ -d ".ccache" ]; then
          echo "ccache is enabled"
          ls -al .ccache | head -n 10
        else
          echo "ccache is disabled"
        fi

    - name: Upload to SourceForge
      working-directory: ./openwrt/bin
      run: |
        packages_arch=$(ls packages/ | head -n 1 | tr -d '\n')

        # 创建 SSH 密钥文件
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.SF_KEY }}" > ~/.ssh/sf_key
        chmod 600 ~/.ssh/sf_key

        user=${{ secrets.SF_USER }}
        fork_name=${{ matrix.config.fork-name }}
        target=${{ matrix.config.target }}
        subtarget=${{ matrix.config.subtarget }}
        feed_path=${{ env.FEED_PATH }}

        mkdir -p ${feed_path}/packages/${packages_arch}
        mkdir -p ${feed_path}/targets/${target}/${subtarget}

        fork_url=frs.sourceforge.net:/home/frs/project/openwrt-forks-build/${fork_name}
        packages_url=${fork_url}/${feed_path}/packages/${packages_arch}/
        targets_url=${fork_url}/${feed_path}/targets/${target}/${subtarget}/

        echo "Create packages dir"
        rsync -ahvHP --relative -e "ssh -i ~/.ssh/sf_key -o StrictHostKeyChecking=no" \
          ${feed_path}/packages/${packages_arch}/ \
        $user@${fork_url}/

        echo "Create targets dir"
        rsync -ahvHP --relative -e "ssh -i ~/.ssh/sf_key -o StrictHostKeyChecking=no" \
            ${feed_path}/targets/${target}/${subtarget}/ \
        $user@${fork_url}

        rm -rf ${feed_path}

        
        # # 使用 rsync 上传文件
        rsync -ahvHP --delete -e "ssh -i ~/.ssh/sf_key -o StrictHostKeyChecking=no" \
          packages/${packages_arch}/ \
        $user@${packages_url}

        echo "Upload packages"
        rsync -ahvHP --delete -e "ssh -i ~/.ssh/sf_key -o StrictHostKeyChecking=no" \
          targets/${target}/${subtarget}/ \
        $user@${targets_url}
                
        # 清理 SSH 密钥
        rm -f ~/.ssh/sf_key
