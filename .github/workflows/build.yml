name: Build


on: 
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'README.md'
# Add a button to trigger the workflow
  workflow_dispatch:

jobs:
  build:
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    timeout-minutes: 1000
    strategy:
      fail-fast: false
      matrix:
        config:
          - fork-name: lean
            repo: https://github.com/coolsnowwolf/lede
            branch: master
            target: x86
            subtarget: "64"
          - fork-name: lean
            repo: https://github.com/coolsnowwolf/lede
            branch: master
            target: rockchip
            subtarget: armv8
          - fork-name: lean
            repo: https://github.com/coolsnowwolf/lede
            branch: master
            target: ramips
            subtarget: mt7621
          - fork-name: lean
            repo: https://github.com/coolsnowwolf/lede
            branch: master
            target: mediatek
            subtarget: filogic
          - fork-name: hanwckf
            repo: https://github.com/hanwckf/immortalwrt-mt798x
            branch: openwrt-21.02
            target: mediatek
            subtarget: mt7981
          - fork-name: hanwckf
            repo: https://github.com/hanwckf/immortalwrt-mt798x
            branch: openwrt-21.02
            target: mediatek
            subtarget: mt7986
          - fork-name: Lienol
            repo: https://github.com/Lienol/openwrt
            branch: "24.10"
            target: x86
            subtarget: "64"
          - fork-name: Lienol
            repo: https://github.com/Lienol/openwrt
            branch: "24.10"
            target: rockchip
            subtarget: armv8
          - fork-name: Lienol
            repo: https://github.com/Lienol/openwrt
            branch: "24.10"
            target: ramips
            subtarget: mt7621
          - fork-name: Lienol
            repo: https://github.com/Lienol/openwrt
            branch: "24.10"
            target: mediatek
            subtarget: filogic
          
          # - ath79/nand
          # - allwinner/generic
          # - amlogic/meson8b
          # - amlogic/mesongx
          # - apm821xx/nand
          # - apm821xx/sata
          # - arc770/generic
          # - archs38/generic
          # - armsr/armv7
          # - armsr/armv8
          # - at91/sam9x
          # - at91/sama5
          # - ath25/generic
          # - ath79/generic
          # - ath79/mikrotik
          # - ath79/tiny
          # - bcm27xx/bcm2708
          # - bcm27xx/bcm2709
          # - bcm27xx/bcm2710
          # - bcm27xx/bcm2711
          # - bcm27xx/bcm2712
          # - bcm47xx/generic
          # - bcm47xx/legacy
          # - bcm47xx/mips74k
          # - bcm4908/generic
          # - bcm53xx/generic
          # - bcm63xx/generic
          # - bcm63xx/smp
          # - gemini/generic
          # - imx/cortexa7
          # - imx/cortexa9
          # - ipq40xx/generic
          # - ipq40xx/mikrotik
          # - ipq806x/generic
          # - kirkwood/generic
          # - lantiq/ase
          # - lantiq/xrx200
          # - lantiq/xway
          # - lantiq/xway_legacy
          # - layerscape/armv7
          # - layerscape/armv8_64b
          # - loongarch64/generic
          # - malta/be
          # - mediatek/mt7622
          # - mediatek/mt7623
          # - mediatek/mt7629
          # - mpc85xx/p1010
          # - mpc85xx/p1020
          # - mpc85xx/p2020
          # - mvebu/cortexa53
          # - mvebu/cortexa72
          # - mvebu/cortexa9
          # - mxs/generic
          # - octeon/generic
          # - octeontx/generic
          # - omap/generic
          # - oxnas/ox820
          # - phytium/armv8
          # - phytium/e2000
          # - phytium/phytiumpi
          # - pistachio/generic
          # - qualcommax/ipq50xx
          # - qualcommax/ipq60xx
          # - qualcommax/ipq807x
          # - ramips/mt7620
          # - ramips/mt76x8
          # - ramips/rt288x
          # - ramips/rt305x
          # - ramips/rt3883
          # - realtek/rtl838x
          # - realtek/rtl839x
          # - realtek/rtl930x
          # - realtek/rtl931x
          # - sifiveu/generic
          # - silicon/armv8
          # - starfive/generic
          # - stm32/stm32mp1
          # - sunxi/cortexa53
          # - sunxi/cortexa7
          # - sunxi/cortexa8
          # - tegra/generic
          # - x86/generic
          # - x86/geode
          # - x86/legacy
          # - zynq/generic

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /usr/local/lib/android \
          /opt/ghc \
          /etc/mysql \
          /etc/php \
          /etc/php \
          /usr/local/.ghcup \
          /opt/hostedtoolcache/CodeQL \
          /usr/local/share/boost

        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get update
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swag texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev qemu-img
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

        # Configure CCACHE
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
        mkdir -p $HOME/.ccache

    - name: Clone
      run: |
        git clone --depth 1 ${{ matrix.config.repo }} -b ${{ matrix.config.branch }} openwrt
        cd openwrt
        latest_commit=$(git rev-parse HEAD)
        echo "LATEST_COMMIT=${latest_commit}" >> $GITHUB_ENV
        
    - name: Cache CCACHE
      uses: actions/cache@v3
      with:
        path: ~/.ccache
        key: ccache-${{ matrix.config.target }}-${{ matrix.config.subtarget }}-${{ env.LATEST_COMMIT }}
        restore-keys: |
          ccache-${{ matrix.config.target }}-${{ matrix.config.subtarget }}-

    - name: Update & Install
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configuration
      run: |
        cd openwrt
        
        # 设置 target 和 subtarget（非交互式）
        echo "CONFIG_TARGET_${{ matrix.config.target }}=y" > .config
        echo "CONFIG_TARGET_${{ matrix.config.target }}_${{ matrix.config.subtarget }}=y" >> .config
        echo "CONFIG_IB=y" >> .config
        echo "CONFIG_SDK=y" >> .config
        echo "CONFIG_TARGET_MULTI_PROFILE=y" >> .config
        echo "CONFIG_TARGET_ALL_PROFILES=y" >> .config
        
        # 启用 CCACHE
        echo "CONFIG_CCACHE=y" >> .config
        
        # 生成完整的默认配置
        make defconfig

        cat .config

    - name: Download
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        # 使用 -k 参数让 make 在遇到错误时继续构建其他目标
        # 使用 -i 参数忽略错误继续构建
        make -j$(nproc) -k -i || true

    - name: Upload to SourceForge
      run: |
        # 创建 SSH 密钥文件
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.SF_KEY }}" > ~/.ssh/sf_key
        chmod 600 ~/.ssh/sf_key
        
        # 使用 rsync 上传文件
        rsync -ahvHP -e "ssh -i ~/.ssh/sf_key -o StrictHostKeyChecking=no" \
          openwrt/bin/ \
          ${{ secrets.SF_USER }}@frs.sourceforge.net:/home/frs/project/openwrt-forks-build/${{ matrix.config.fork-name }}/snapshot/
        
        # 清理 SSH 密钥
        rm -f ~/.ssh/sf_key
